
Shell
하드웨어 - 커널 - 쉘 구조로 사용자의 입력을 커널을 통해 하드웨어로 전달
하드웨어에서 실행된 결과를 커널을 통해 사용자에게 전달

CLI : Command Line Interface

Shell의 기능
1. 사용자와 하드웨어, 커널간의 연결을 수행 : User Interface
2. 사용자가 입력한 명령어를 해석하여 커널에 전달 : Command Interpreter
3. 논리적인 구조를 통한 효율적인 명령어 수행 : Programming Language

Shell의 종류
1. Bourne Shell : 가장 기본적인 쉘. 초기 UNIX와 함께 발표됨. 가장 적은 기능을 포함. 성능이 우수. sh
2. C Shell : C의 프로그램 문법을 사용가능. 일부 편의기능을 제공. 명령어 수행 성능이 떨어짐. csh
3. Korn Shell : Bourne Shell과 호환. 기타 편의기능 수행 가능. 성능 개선. ksh
4. Bash Shell : Bourne Again Shell. Bourne Shell 과 완벽한 호환. 기타 대부분의 편의기능을 기본값으로 제공. Linux 의 기본 쉘. bash

==============================================

Shell 에서 명령어 실행 과정
ls -l /etc | more

1. 쉘은 사용자의 명령어를 분해
ls / -l / | / more

2. 명령어를 탐색. 명령어의 종류를 파악
외부 명령어 (실행 파일이 존재)
내장 명령어 (Shell 내장)
Alias (별칭)
스크립트

3. 서브쉘(Sub Shell)을 생성하고 fork(), exec() 형태로 프로그램 실행
   원래 쉘은 wait() 상태로 대기

4. 서브쉘은 exec()로 명령어 수행

5. 실행결과를 Kernel에 전달
6. Kernel 은 Hardware에 전달
7. Hardware는 Kernel로 실행결과 전달
8. Kernel 은 Shell로 실행결과 전달

9. 프로그램 완료 후 서브쉘이 종료. 자원을 반납
10. 원본 쉘은 입출력 가능 상태로 전환. 프롬프트 복귀


============================================

스크립트 
- Batch Process 형태로 실행가능한 명령어를 나열
ex) 
# cd /tmp
# gedit test.sh
cal
date
# /bin/bash test.sh
- 유연하고 효율적인 실행을 위해 문법(제어문)이 적용됨 (반복문, 조건문)

===========================================

스크립트 특징
장점
1. 외부 명령어 등을 수행 가능 - 만들기가 쉽다
2. 이식성이 좋다 - 동일한 쉘에서는 똑같이 동작함
3. 컴파일이 없다 - 인터프리터 방식으로 실행하면서 테스트 가능
단점
1. 속도가 느리다
2. 정확한 연산 등을 요구하는 작업에는 적합하지 않음

===========================================

스크립트 실행방법
1. 쉘을 실행하고 스크립트를 지정
# /bin/bash test.sh

2. shebang을 지정하고, ./[스크립트이름] 형태로 실행
# cat test2.sh
#!/bin/bash
...
...

# ./test2.sh
=> 실행되지 않음. 권한 부족

# ls -l test2.sh
-rw-r--r--   1 root     root          21  7월  4일  11:33 test2.sh

rw-r--r--
rw- : 소유자 권한
r-- : 소유 그룹 권한
r-- : 기타 사용자 권한

권한 표시 : rwx
r : 읽기 권한 (Read)
w : 쓰기 권한 (Write)
x : 실행 권한 (Execute)

권한 변경 명령 : chmod
# chmod u+x test2.sh
# ls -l test.sh

스크립트를 실행하기 위해 필요한 권한
- 읽기 / 실행 권한
chmod u+x (소유자에게 실행권한 부여)
chmod +x (전체에게 실행권한 부여)

3. dot command를 사용하여 실행
# . ./test2.sh

===========================================

디버그모드
- 쉘을 지정하고 스크립트를 실행하는 방법에서 옵션

옵션
-x : /bin/bash -x test2.sh 해당 단계에서 실행되는 내용을 출력. 실행 내용
-v : /bin/bash -v test2.sh 해당 단계에서 실행되는 내용을 출력. 문법
-f : /bin/bash -f test2.sh 메타문자 사용금지 (*, ?)

스크립트 내에서 디버그 설정/해제
set -x : 디버그 모드 활성화
set +x : 디버그 모드 비활성화

# cat test4.sh
#!/bin/bash
ls /etc/*.conf

# /bin/bash test4.sh
# /bin/bash -f test4.sh
각각 실행결과 확인

============================================

쉘 환경변수 : 쉘 운영에 필요한 값을 저장하고 있음

# env : 환경변수 확인

환경변수 설정 : 초기화 파일
/etc/profile
$HOME/.profile

hash command
- 사용자가 사용한 명령어 목록 및 사용회수 저장
- hash -r로 초기화

============================================

Exit Status : 종료 상태. 프로그램의 실행 결과를 확인

매뉴얼 페이지 확인
# man [명령어]

매뉴얼 페이지에 EXIT STATUS 부분에 명령어별 EXIT STATUS 가 정리

echo $? : 마지막 실행한 명령의 Exit Status 확인

============================================

명령어 동시 수행
[명령어1] ; [명령어2]

명령어 Groupping
( [명령어1]; [명령어2] )
ex) ( cal; date ) > caldate.txt

============================================

명령어 조건부 수행
[명령어1] && [명령어2] : 명령어1의 실행결과가 참일경우 명령어2를 실행
[명령어1] || [명령어2] : 명령어1의 실행결과가 거짓일경우 명령어2를 실행

ex) grep merong test.txt && echo "Found!"
- test.txt 파일에서 merong 문자열을 찾고, 결과가 참일 경우 echo 실행
grep merong test.txt || echo "Not Found!"
- test.txt 파일에서 merong 문자열을 찾고, 결과가 거짓일 경우 echo 실행

============================================

변수 : 프로그램 실행 중 필요한 값을 저장하기 위한 공간

사용자 지정 변수 선언
# 변수명=값

변수는 기본적으로 문자열 형태로 처리됨 - 산술연산은 별도의 방법으로
- let , (( ))

변수에 명령어 실행결과 저장
# 변수명=`[명령어]`

다른 변수의 값을 변수에 저장
# 변수명2=$변수명1

============================================

Quotation 사용법

'  ' : 모든 특수문자를 무시하는 문자열
" " : 일부 특수문자를 인식하는 문자열 ($, \, `)
` ` : 내부 명령어를 실행하고 실행 결과를 출력

[root@unknown:/tmp]$ echo 'My Home is $HOME'
My Home is $HOME
[root@unknown:/tmp]$ echo 'Today is `date`'
Today is `date`
[root@unknown:/tmp]$ echo "My Home is $HOME"
My Home is /
[root@unknown:/tmp]$ echo "Today is `date`"
Today is 2016년 7월  4일 월요일 오후 02시 45분 16초
[root@unknown:/tmp]$ echo "\$HOME is $HOME"
$HOME is /

==============================================

위치매개변수

cal.exe
숫자1을 입력하시오 : 100
숫자2를 입력하시오 : 200
연산자를 입력하시오 : +
결과 : 100 + 200 = 300

cal.exe 100 + 200
결과 : 100 + 200 = 300

c에서
inc main(int argc, char * argv[])
argc : 인자의 개수
argv[] : 인자 문자열의 배열

사용자가 명령어 실행시 명령어 뒤에 인자로 붙이는 값 : 위치매개변수
$0 ~ $9, ${10}, ${11}....
$0 : 현재 스크립트 이름
$1~ : 해당 위치의 위치매개변수 값

위치매개변수 테스트
# cat test5.sh
#!/bin/bash
echo $0
echo $1
echo $2
echo $3
echo $4
echo $10
echo ${10}

$# : 위치매개변수의 개수 (명령어 $0 제외)
$* : 전체 위치매개변수
$@ : 전체 위치매개변수

newscript.sh
위치매개변수가 1개일때 : 위치매개변수 위치의 파일을 삭제
위치매개변수가 2개일때 : 1번째 위치매개변수의 파일을 2번 위치매개변수위치로 이동
위치매개변수가 3개일때 : 1번이름을 가진 사용자를 생성하고 2번위치의 패스워드 입력, 3번위치의 홈디렉토리 사용
=> 위치매개변수의 개수를 찾는 $# 를 사용하여 조건 실행

==============================================

grep : 파일에서 텍스트 검색
sed : Stream Editor. 파일 내용을 수정하여 출력, 선택출력 등 지원
awk : 데이터를 필드 단위로 처리가능, 간단한 프로그래밍 기능 제공
(cut, sort, uniq)

==============================================

grep : Globally Regular Expression Print

특징
- 문자열 검색에 사용됨
- 정규화표현식(Regular Expression, regexp, regexr)
- 찾은 내용을 화면에 출력한다
- 파일을 검색해도 파일의 내용은 변경되지 않음
- ASCII텍스트, 스크립트 등 사용자가 내용을 확인할 수 있는 파일만 검색가능
  (실행파일 등 Binary 파일은 strings 명령어를 사용하여 검색)

사용법
1. grep [옵션] '[정규화표현식]' [검색대상]
2. [명령어] | grep [옵션] '[정규화표현식]'

파이프라인(Pipeline, ' | ' )
- 좌측 명령어의 실행결과 발생한 표준 출력을 우측 명령어의 표준 입력으로 전달
ex) # df -h | grep '/export/home'

grep 명령어의 옵션
-i : 대소문자를 구분하지 않고 검색
-l : 검색 결과를 출력하지 않고, 찾은 파일 이름만 출력
-n : 검색된 내용 앞에 줄 수 표시
-v : 해당 패턴이 없는 라인을 출력
-c : 해당 패턴이 들어있는 라인의 개수를 출력
-w : 단일 단어 패턴만 검색


==============================================

grep 사용예

1. 사용자 검색
grep '[사용자이름]' /etc/passwd
cat /etc/passwd | grep '[사용자이름]'

2. 프로세스 검색
ps -ef | grep '[프로세스이름]'

3. 네트워크 연결 검색
nestat -an | grep 'ESTABLISHED'

=============================================

정규화표현식 (Regular Expression)

^pattern : 패턴으로 시작되는 라인을 검색
pattern$ : 패턴으로 끝나는 라인을 검색
\<pattern : 패턴으로 시작되는 단어를 검색
pattern\> : 패턴으로 끝나는 단어를 검색
. : 아무 글자나 한 글자
a* : 패턴이 0번 이상 반복되는 부분을 검색 
ex) abc abbc abbbc ac => ab*c
     abfffc (x)
.* : 길이 제한 없이 아무 글자 패턴 검색
ex) abffffc => a.*c
 - ac, abc, abbbc, ahjakdhkjahsc, a                           c
[ ] : 포함되는 글자 중 한 글자
ex) [abcdexz! ]
[A-Z] : 지정된 범위 중 한 글자
ex) [A-Z] : [ABCDEF....XYZ] [a-zA-Z0-9]
[^A-Z] : 지정된 범위에 해당하지 않는 한 글자
ex) [^A-Z] : [ABCDE....XYZ]가 아닌 패턴 검색
\ : Escape Sequence. 뒤 문자를 특수문자가 아닌 일반문자로 사용

Hello 에 정규화표현식으로 [^A-Z] 검색하면?
# grep '[^A-Z]' testword
Hello
# grep -v '[A-Z]' testword
# 

datafile 에서 다음 검색 입력하였을 때 결과 예상 후 실행
# grep '[정규화표현식]' datafile

NW	: NW 패턴을 검색
^n	: n으로 시작하는 라인 검색
4$	: 4로 끝나는 라인 검색
TB Savage (홑따옴표 없이) : TB 패턴을 Savage 와 datafile에서 검색
TB Savage (홑따옴표 치고) : TB Savage 패턴을 datafile에서 검색
5\..	: 5. 으로 시작하고 한 글자가 이어지는 패턴 검색
\.5	: .5인 패턴 검색
^[we]	: w이거나 e인 패턴으로 시작하는 라인
[^0-9]	: 0-9가 아닌 한글자 패턴 검색
	A-Za-z!@#$%^
-v [0-9]	: -v옵션에 의하여 0-9가 들어있지 않은 라인 검색
[A-Z][A-Z] [A-Z]	: 대문자 두글자, 공백, 대문자 한글자 패턴 검색
ss*	: s가 하나 있고 s가 0번 이상 반복
\<north	:  north 패턴 중 앞이 분리된 단어인 형태 검색
\<north\> : north 패턴 중 앞뒤가 분리된 단어인 형태 검색



내일 할 내용
egrep 명령어
sed
awk (cut, sort, uniq)
프로그래밍 제어문 문법
함수 사용법
Trap